<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="True" valType="bool" updates="None" name="Show mouse"/>
    <Param val="pix" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="words-area-segmentation" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="MouseGaze" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="0.0000, 0.0000, 0.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="60" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Teste" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="0.0824, -0.6627, 0.7725" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="text.boundingBox[0],text.boundingBox[1]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_origin" plugin="None">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="60" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_origin" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Teste" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#spliting words inside of the textbox&amp;#10;&amp;#10;palavras = text.text.split();&amp;#10;tamanhos_das_palavras = []&amp;#10;&amp;#10;for palavra in palavras:&amp;#10;    text = visual.TextStim(win=win, name='text',&amp;#10;        text=palavra,&amp;#10;        font='Open Sans',&amp;#10;        pos=(0, 0), height=60.0, wrapWidth=None, ori=0.0, &amp;#10;        color=[-1.0000, -1.0000, -1.0000], colorSpace='rgb', opacity=None, &amp;#10;        languageStyle='LTR',&amp;#10;        depth=0.0);&amp;#10;    print(palavra)&amp;#10;    tamanhos_das_palavras.append(text.boundingBox)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="palavras = text.text.split(&quot; &quot;);&amp;#10;tamanhos_das_palavras = [];&amp;#10;for (var palavra, _pj_c = 0, _pj_a = palavras, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    palavra = _pj_a[_pj_c];&amp;#10;    text = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;text&quot;, &quot;text&quot;: palavra, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [0, 0], &quot;height&quot;: 60.0, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: [(- 1.0), (- 1.0), (- 1.0)], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;    console.log(palavra);&amp;#10;    tamanhos_das_palavras.push(text.boundingBox);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="tamanhos">
      <RoutineSettingsComponent name="tamanhos" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="tamanhos" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="tamanho = &quot; &quot;;&amp;#10;for (var palavra, _pj_c = 0, _pj_a = tamanhos_das_palavras, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    palavra = _pj_a[_pj_c];&amp;#10;    tamanho += ((((&quot;(&quot; + palavra[0].toString()) + &quot;,&quot;) + palavra[1].toString()) + &quot;)\n&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#catching words size (w,h).&amp;#10;tamanho = &quot; &quot;&amp;#10;for palavra in tamanhos_das_palavras:&amp;#10;    tamanho += &quot;(&quot;+str(palavra[0])+&quot;,&quot;+str(palavra[1])+&quot;)\n&quot;&amp;#10;   &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="60" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$tamanho" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="teste_display_palavras">
      <RoutineSettingsComponent name="teste_display_palavras" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="teste_display_palavras" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="60" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Teste" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon_3" plugin="None">
        <Param val="top-left" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="0.6471, -0.1765, -0.7647" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-tamanhos_das_palavras[0][0],0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="tamanhos_das_palavras[0][0],tamanhos_das_palavras[0][1]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="insert_blocks_in_textsstim">
      <RoutineSettingsComponent name="insert_blocks_in_textsstim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="insert_blocks_in_textsstim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# text_2.boundingBox # - (w,h)&amp;#10;# e se juntarmos as caixas de texto até dar o que tem&amp;#10;#nessa dai&amp;#10;&amp;#10;window_width = win.size[0] #width&amp;#10;windows_height = win.size[1] #height&amp;#10;point_0_0 = (win.size[0]/2, win.size[1]/2)&amp;#10;&amp;#10;#e agora qual o vértice inicial da box? Só calcular!&amp;#10;#ESQUERDA&amp;#10;y_text_box = (text.boundingBox[1]/2) + point_0_0[1]&amp;#10;x_text_box = point_0_0[0] - (text.boundingBox[0]/2)&amp;#10;&amp;#10;# está dando um resultado alto no x. Algo está errado.&amp;#10;&amp;#10;#o (0,0) está no meio, logo: (win.size[0]/2, win.size[1]/2)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="window_width = psychoJS.window.size[0];&amp;#10;windows_height = psychoJS.window.size[1];&amp;#10;point_0_0 = [(psychoJS.window.size[0] / 2), (psychoJS.window.size[1] / 2)];&amp;#10;y_text_box = ((text.boundingBox[1] / 2) + point_0_0[1]);&amp;#10;x_text_box = (point_0_0[0] - (text.boundingBox[0] / 2));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="polygon_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="-0.2549, 0.2392, 0.2549" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="x_text_box, y_text_box" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="tamanhos_das_palavras[0][0],tamanhos_das_palavras[0][1]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_4" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="30" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="It can be a tricky thing to navigate deciding when to open doors for someone following you without awkwardly standing there for too long." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="tamanho_texto_comp">
      <RoutineSettingsComponent name="tamanho_texto_comp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="tamanho_texto_comp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_5" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="30" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text.boundingBox" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="pillow">
      <RoutineSettingsComponent name="pillow" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pillow" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_4" plugin="None">
        <Param val="from PIL import Image, ImageDraw, ImageFont&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {Image, ImageDraw, ImageFont} from 'PIL';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="def textsize(text, font):&amp;#10;    im = Image.new(mode=&quot;P&quot;, size=(0, 0))&amp;#10;    draw = ImageDraw.Draw(im)&amp;#10;    _, _, width, height = draw.textbbox((0, 0), text=text, font=font)&amp;#10;    return width, height&amp;#10;&amp;#10;# Define window size&amp;#10;window_width = win.size[0]&amp;#10;window_height = win.size[1]&amp;#10;&amp;#10;def translation_for_psychopys_coordinaate_system_x(x):&amp;#10;    x_new = (x*(win.size[0]//2))%win.size[0]&amp;#10;    return x_new&amp;#10;&amp;#10;def translation_for_psychopys_coordinaate_system_y(y):&amp;#10;    y_new = (y*(win.size[1]//2))%win.size[1]&amp;#10;    return y_new&amp;#10;    &amp;#10;def translate_coordinate_x(x):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Translates coordinates from a system with (0,0) at the top-left corner&amp;#10;    to a system with (0,0) at the center.&amp;#10;&amp;#10;    Parameters:&amp;#10;    x (float): The x-coordinate in the original system.&amp;#10;    y (float): The y-coordinate in the original system.&amp;#10;    width (float): The width of the coordinate system.&amp;#10;    height (float): The height of the coordinate system.&amp;#10;&amp;#10;    Returns:&amp;#10;    (float, float): The translated x and y coordinates in the new system.&amp;#10;    &quot;&quot;&quot;&amp;#10;    # Translate x-coordinate: Centered system has x = (x - width / 2)&amp;#10;    new_x = x - win.size[0] / 2&amp;#10;    return new_x&amp;#10;    &amp;#10;def translate_coordinate_y(y):&amp;#10;    # Translate y-coordinate: Centered system has y = (height / 2 - y)&amp;#10;    new_y = win.size[1] / 2 - y&amp;#10;    return new_y&amp;#10;&amp;#10;&amp;#10;print(&quot;Tamanho da tela: &quot;,window_width,&quot; e &quot;, window_height)&amp;#10;&amp;#10;&amp;#10;# Define text component size (w, h) and its centered position&amp;#10;text_component_width = text.boundingBox[0]&amp;#10;text_component_height = text.boundingBox[1]&amp;#10;&amp;#10;print(&quot;Tamanho do comp: &quot;,text_component_width,&quot; e &quot;, text_component_height)&amp;#10;&amp;#10;ponto_central = [translate_coordinate_x(window_width/2), translate_coordinate_y(window_height/2)]&amp;#10;&amp;#10;# Calculate the top-left position of the text component&amp;#10;#text_component_x = (window_width - text_component_width) // 2&amp;#10;#text_component_y = (window_height - text_component_height) // 2&amp;#10;text_component_x =translate_coordinate_x((ponto_central[0] - (text_component_width//2)))&amp;#10;text_component_y = translate_coordinate_y((ponto_central[1] - (text_component_height//2)))&amp;#10;&amp;#10;print(&quot;X,y do comp: &quot;,text_component_x,&quot; e &quot;, text_component_y)&amp;#10;&amp;#10;# Define a sample list of words&amp;#10;words = palavras&amp;#10;&amp;#10;# Create a blank image with the window size&amp;#10;#image = Image.new('RGB', (window_width, window_height), 'white')&amp;#10;#draw = ImageDraw.Draw(image)&amp;#10;&amp;#10;# Set font size (for demonstration, adjust as needed)&amp;#10;font_size = 30&amp;#10;font = ImageFont.truetype(&quot;opensans.ttf&quot;, font_size)&amp;#10;&amp;#10;# Calculate spacing and positions&amp;#10;word_spacing = 20  # Space between words (in pixels)&amp;#10;start_x = text_component_x + 10  # Starting x position within text component&amp;#10;start_y = text_component_y + \&amp;#10;    (text_component_height - font_size) // 2  # Vertical centering&amp;#10;&amp;#10;print(&quot;Start pos: &quot;, start_x, &quot; e &quot;,start_y)&amp;#10;&amp;#10;# Draw rectangles above each word&amp;#10;rectangle_height = 30&amp;#10;current_x = start_x&amp;#10;&amp;#10;roi_comp_coordinates = []&amp;#10;&amp;#10;for word in words:&amp;#10;    word_width, _ = textsize(word, font=font)&amp;#10;&amp;#10;    # Rectangle coordinates&amp;#10;    x1 = current_x&amp;#10;    y1 = start_y - rectangle_height&amp;#10;    x2 = current_x + word_width&amp;#10;    y2 = start_y&amp;#10;    &amp;#10;    roi_comp_coordinates.append([x1,y1,x2,y2])&amp;#10;    # Draw a rectangle above the word&amp;#10;    #draw.rectangle([x1, y1, x2, y2], outline='red', width=2)&amp;#10;&amp;#10;    # Update the x position for the next word&amp;#10;    current_x += word_width + word_spacing&amp;#10;&amp;#10;# Save or display the image&amp;#10;#image.save('output_with_rectangles.png')&amp;#10;#image.show()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="polygon_4" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="1.0000, -1.0000, -0.1922" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="roi_comp_coordinates[0][0],roi_comp_coordinates[0][1]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="tamanhos_das_palavras[0][0],tamanhos_das_palavras[0][1]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="multi_line_approach">
      <RoutineSettingsComponent name="multi_line_approach" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="multi_line_approach" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_5" plugin="None">
        <Param val="&amp;#10;from psychopy.hardware import keyboard&amp;#10;&amp;#10;import psychopy.iohub as io&amp;#10;&amp;#10;import sys  # to get file system encoding&amp;#10;&amp;#10;import os  # handy system and path functions&amp;#10;&amp;#10;from numpy.random import random, randint, normal, shuffle, choice as randchoice&amp;#10;&amp;#10;from numpy import (sin, cos, tan, log, log10, pi, average,&amp;#10;&amp;#10;                   sqrt, std, deg2rad, rad2deg, linspace, asarray)&amp;#10;&amp;#10;import numpy as np  # whole numpy lib is available, prepend 'np.'&amp;#10;&amp;#10;from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,&amp;#10;&amp;#10;                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER, priority)&amp;#10;&amp;#10;from psychopy.tools import environmenttools&amp;#10;&amp;#10;from psychopy import sound, gui, visual, core, data, event, logging, clock, colors, layout, iohub, hardware" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {keyboard} from 'psychopy/hardware';&amp;#10;import * as io from 'psychopy/iohub';&amp;#10;import * as sys from 'sys';&amp;#10;import * as os from 'os';&amp;#10;import {choice as randchoice, normal, randint, random, shuffle} from 'numpy/random';&amp;#10;import {asarray, average, cos, deg2rad, linspace, log, log10, pi, rad2deg, sin, sqrt, std, tan} from 'numpy';&amp;#10;import * as np from 'numpy';&amp;#10;import {FINISHED, FOREVER, NOT_STARTED, PAUSED, PLAYING, PRESSED, RELEASED, STARTED, STOPPED, priority} from 'psychopy/constants';&amp;#10;import {environmenttools} from 'psychopy/tools';&amp;#10;import {clock, colors, core, data, event, gui, hardware, iohub, layout, logging, sound, visual} from 'psychopy';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#AQUI" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="def get_word_positions(text_stim,height_word):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Calculate the positions of words in a multi-line TextStim, accounting for varying line lengths.&amp;#10;    &quot;&quot;&quot;&amp;#10;    lines = text_stim.text.splitlines()&amp;#10;    word_positions = []&amp;#10;    &amp;#10;    # Estimate line height&amp;#10;    line_height = text_stim.height * 1.2&amp;#10;    &amp;#10;    for i, line in enumerate(lines):&amp;#10;        # Create a temporary TextStim to measure the width of the line&amp;#10;        line_stim = visual.TextStim(win, text=line, pos=(0, 0), color=text_stim.color, units='pix',height=height_word)&amp;#10;        line_width, line_height = line_stim.boundingBox&amp;#10;        &amp;#10;        # Determine the starting x position for the current line&amp;#10;        current_x = -line_width / 2&amp;#10;        &amp;#10;        # Calculate y position for the current line&amp;#10;        current_y = text_stim.pos[1] + (len(lines) / 2 - i) * line_height -16&amp;#10;        &amp;#10;        for word in line.split():&amp;#10;            # Create a temporary TextStim to measure the word width&amp;#10;            word_stim = visual.TextStim(win, text=word, pos=(0, 0), color=text_stim.color, units='pix',height=height_word)&amp;#10;            word_width, word_height = word_stim.boundingBox&amp;#10;            &amp;#10;            # Calculate the position (center of the word)&amp;#10;            word_position = (current_x + word_width / 2, current_y)&amp;#10;            &amp;#10;            # Store word info&amp;#10;            word_positions.append((word, word_position, word_width, word_height))&amp;#10;            &amp;#10;            # Move to the next word position (accounting for space between words)&amp;#10;            current_x += word_width + 5 # Space between words (use text size or adjust if needed)&amp;#10;    &amp;#10;    return word_positions&amp;#10;    &amp;#10;&amp;#10;# Calculate positions of each word&amp;#10;word_positions = get_word_positions(text_stim,text_stim.height)&amp;#10;&amp;#10;i = 0&amp;#10;roi_components = []&amp;#10;# Draw rectangles around each word&amp;#10;for word, pos, width, height in word_positions:&amp;#10;    rect_stim = visual.Rect(win, width=width * 1.1, height=height * 1.1,  # Some padding&amp;#10;                            pos=pos, lineColor='black', fillColor='pink', units='pix')&amp;#10;    word_i = visual.ROI(win, name=word, device=eyetracker,&amp;#10;        debug=False,&amp;#10;        shape='rectangle',&amp;#10;        pos=pos, size=(width * 1.1, height * 1.1), &amp;#10;        anchor='center', ori=0.0, depth=-2&amp;#10;        )&amp;#10;    roi_components.append(word_i)&amp;#10;    #eu devo adicionar mais funções para que o ROI funcione aqui? &amp;#10;    rect_stim.draw()&amp;#10;# Draw the text again so it appears on top of the rectangles&amp;#10;text_stim.draw()&amp;#10;# Display everything&amp;#10;win.flip()&amp;#10;&amp;#10;#printaar na tela&amp;#10;for r in roi_components:&amp;#10;    print(r.pos)&amp;#10;&amp;#10;# Wait 5 sec&amp;#10;core.wait(5)&amp;#10;&amp;#10;# clear any previous roi data&amp;#10;for r in roi_components:&amp;#10; r.reset()&amp;#10;&amp;#10;lista_def = []&amp;#10;for roi in roi_components:&amp;#10;    lista_def.append(roi)&amp;#10;&amp;#10;#isso aqui provavelmente será sobrescrito&amp;#10;multi_line_approachComponents = lista_def&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="for roi in roi_components:&amp;#10;&amp;#10;    # if roi is starting this frame...&amp;#10;&amp;#10;    if roi.status == NOT_STARTED and tThisFlip &gt;= 5-frameTolerance:&amp;#10;&amp;#10;        # keep track of start time/frame for later&amp;#10;&amp;#10;        roi.frameNStart = frameN  # exact frame index&amp;#10;&amp;#10;        roi.tStart = t  # local t and not account for scr refresh&amp;#10;&amp;#10;        roi.tStartRefresh = tThisFlipGlobal  # on global time&amp;#10;&amp;#10;        # time at next scr refresh&amp;#10;&amp;#10;        win.timeOnFlip(roi, 'tStartRefresh')&amp;#10;&amp;#10;        # add timestamp to datafile&amp;#10;&amp;#10;        thisExp.timestampOnFlip(win, roi.name+'.started')&amp;#10;&amp;#10;        # update status&amp;#10;&amp;#10;        roi.status = STARTED&amp;#10;&amp;#10;        roi.setAutoDraw(True)&amp;#10;&amp;#10;&amp;#10;&amp;#10;    # if roi is active this frame...&amp;#10;&amp;#10;    if roi.status == STARTED:&amp;#10;&amp;#10;        # update params&amp;#10;&amp;#10;        pass&amp;#10;&amp;#10;        # check whether roi has been looked in&amp;#10;&amp;#10;        if roi.isLookedIn:&amp;#10;&amp;#10;            if not roi.wasLookedIn:&amp;#10;&amp;#10;                # store time of first look&amp;#10;&amp;#10;                roi.timesOn.append(roi.clock.getTime())&amp;#10;&amp;#10;                # store time looked until&amp;#10;&amp;#10;                roi.timesOff.append(roi.clock.getTime())&amp;#10;&amp;#10;            else:&amp;#10;&amp;#10;                # update time looked until&amp;#10;&amp;#10;                roi.timesOff[-1] = roi.clock.getTime()&amp;#10;&amp;#10;            roi.wasLookedIn = True  # if roi is still looked at next frame, it is not a new look&amp;#10;&amp;#10;        else:&amp;#10;&amp;#10;            if roi.wasLookedIn:&amp;#10;&amp;#10;                # update time looked until&amp;#10;&amp;#10;                roi.timesOff[-1] = roi.clock.getTime()&amp;#10;&amp;#10;            roi.wasLookedIn = False  # if roi is looked at next frame, it is a new look&amp;#10;&amp;#10;    else:&amp;#10;&amp;#10;        roi.clock.reset()  # keep clock at 0 if roi hasn't started / has finished&amp;#10;&amp;#10;        roi.wasLookedIn = False  # if roi is looked at next frame, it is a new look&amp;#10;&amp;#10;&amp;#10;&amp;#10;    # if roi is stopping this frame...&amp;#10;&amp;#10;    if roi.status == STARTED:&amp;#10;&amp;#10;        # is it time to stop? (based on global clock, using actual start)&amp;#10;&amp;#10;        if tThisFlipGlobal &gt; roi.tStartRefresh + 5.0-frameTolerance:&amp;#10;&amp;#10;            # keep track of stop time/frame for later&amp;#10;&amp;#10;            roi.tStop = t  # not accounting for scr refresh&amp;#10;&amp;#10;            roi.frameNStop = frameN  # exact frame index&amp;#10;&amp;#10;            # add timestamp to datafile&amp;#10;&amp;#10;            thisExp.timestampOnFlip(win, roi.name+'.stopped')&amp;#10;&amp;#10;            # update status&amp;#10;&amp;#10;            roi.status = FINISHED&amp;#10;&amp;#10;            roi.setAutoDraw(False)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="for (var roi, _pj_c = 0, _pj_a = roi_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    roi = _pj_a[_pj_c];&amp;#10;    if (((roi.status === NOT_STARTED) &amp;&amp; (tThisFlip &gt;= (5 - frameTolerance)))) {&amp;#10;        roi.frameNStart = frameN;&amp;#10;        roi.tStart = t;&amp;#10;        roi.tStartRefresh = tThisFlipGlobal;&amp;#10;        psychoJS.window.timeOnFlip(roi, &quot;tStartRefresh&quot;);&amp;#10;        psychoJS.experiment.timestampOnFlip(psychoJS.window, (roi.name + &quot;.started&quot;));&amp;#10;        roi.status = PsychoJS.Status.STARTED;&amp;#10;        roi.setAutoDraw(true);&amp;#10;    }&amp;#10;    if ((roi.status === PsychoJS.Status.STARTED)) {&amp;#10;        if (roi.isLookedIn) {&amp;#10;            if ((! roi.wasLookedIn)) {&amp;#10;                roi.timesOn.push(roi.clock.getTime());&amp;#10;                roi.timesOff.push(roi.clock.getTime());&amp;#10;            } else {&amp;#10;                roi.timesOff.slice((- 1))[0] = roi.clock.getTime();&amp;#10;            }&amp;#10;            roi.wasLookedIn = true;&amp;#10;        } else {&amp;#10;            if (roi.wasLookedIn) {&amp;#10;                roi.timesOff.slice((- 1))[0] = roi.clock.getTime();&amp;#10;            }&amp;#10;            roi.wasLookedIn = false;&amp;#10;        }&amp;#10;    } else {&amp;#10;        roi.clock.reset();&amp;#10;        roi.wasLookedIn = false;&amp;#10;    }&amp;#10;    if ((roi.status === PsychoJS.Status.STARTED)) {&amp;#10;        if ((tThisFlipGlobal &gt; ((roi.tStartRefresh + 5.0) - frameTolerance))) {&amp;#10;            roi.tStop = t;&amp;#10;            roi.frameNStop = frameN;&amp;#10;            psychoJS.experiment.timestampOnFlip(psychoJS.window, (roi.name + &quot;.stopped&quot;));&amp;#10;            roi.status = PsychoJS.Status.FINISHED;&amp;#10;            roi.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="#AQUI" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var roi, _pj_c = 0, _pj_a = roi_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    roi = _pj_a[_pj_c];&amp;#10;    psychoJS.experiment.addData((roi.name + &quot;.numLooks&quot;), roi.numLooks);&amp;#10;    if (roi.numLooks) {&amp;#10;        psychoJS.experiment.addData((roi.name + &quot;.timesOn&quot;), roi.timesOn);&amp;#10;        psychoJS.experiment.addData((roi.name + &quot;.timesOff&quot;), roi.timesOff);&amp;#10;    } else {&amp;#10;        psychoJS.experiment.addData((roi.name + &quot;.timesOn&quot;), &quot;&quot;);&amp;#10;        psychoJS.experiment.addData((roi.name + &quot;.timesOff&quot;), &quot;&quot;);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for roi in roi_components:&amp;#10;    thisExp.addData(roi.name+'.numLooks', roi.numLooks)&amp;#10;&amp;#10;    if roi.numLooks:&amp;#10;&amp;#10;        thisExp.addData(roi.name+'.timesOn', roi.timesOn)&amp;#10;&amp;#10;        thisExp.addData(roi.name+'.timesOff', roi.timesOff)&amp;#10;&amp;#10;    else:&amp;#10;&amp;#10;        thisExp.addData(roi.name+'.timesOn', &quot;&quot;)&amp;#10;&amp;#10;        thisExp.addData(roi.name+'.timesOff', &quot;&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <EyetrackerRecordComponent name="etRecord" plugin="None">
        <Param val="Start Only" valType="str" updates="None" name="actionType"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="etRecord" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
      </EyetrackerRecordComponent>
      <TextComponent name="text_stim" plugin="None">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="30" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_stim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Juliana é linda" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon_5" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="-0.2549, 0.2392, 0.2549" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="eyetracker.getPos()" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.35, 0.35)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="multi_line_approach"/>
  </Flow>
</PsychoPy2experiment>
